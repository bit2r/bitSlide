{
  "hash": "e25bce8e3c6433e7b02cb2f3481e0437",
  "result": {
    "markdown": "---\ntitle: \"Old Faithful\"\nformat: \n  html:\n    toc: false\n    echo: false\n    keep-hidden: true\n    code-tools: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n![](fig/interactive-workflow.png)\n\n# 데이터\n\n데이터는 외부에서 `.csv` 파일등을 가져오는 방식이 대표적이다. 또다른 방식은 데이터 패키지 ([`bitData`](https://github.com/bit2r/bitData))에 내장된 데이터를 바로 가져오는 방식이다.\n\n## 외부 데이터\n\n`faithful.csv` 로컬 디스크에 저장된 데이터를 가져와서 인터랙티브 시각화에 사용하는 경우 다음과 같이 `FileAttachment()` 함수를 사용한다.\n\n\n```{ojs}\neruption_tbl = FileAttachment(\"../data/faithful.csv\").csv({ typed: true })\n\n<!-- ojs_define(eruption_data = eruption_tbl) -->\n```\n\n\n## 데이터 패키지\n\nR 혹은 파이썬에서 데이터를 바로 생성시키고 이를 인터랙티브 시각화에 사용하는 방식도 존재한다. 마찬가지로 외부 데이터 패키지 [`bitData`](https://github.com/bit2r/bitData) 에서 R 환경에서 데이터를 적재시키고 이를 인터랙티브 시각화에 사용하는 방식도 있다.\n\n\n\n::: {.cell warning.hidden='true' message.hidden='true'}\n\n```{.r .cell-code .hidden}\nlibrary(tidyverse)\n\nnormal_values <- rnorm(1000)\n\nnormal_data <- normal_values %>% \n  as_tibble()\n\nojs_define(normal_data = normal_data)\n```\n:::\n\n\n# UI\n\n인터랙티브 데이터 시각화를 위해서 먼저 UI 입력부분을 정의힌다.\n\n\n```{ojs}\n//| panel: input\nviewof bill_length_min = Inputs.range(\n  [32, 50], \n  {value: 35, step: 1, label: \"Bill length (min):\"}\n)\nviewof islands = Inputs.checkbox(\n  [\"Torgersen\", \"Biscoe\", \"Dream\"], \n  { value: [\"Torgersen\", \"Biscoe\"], \n    label: \"Islands:\"\n  }\n)\n```\n\n\n\n::: {.panel-tabset}\n\n## Plot\n\n\n```{ojs}\nPlot.rectY(filtered, \n  Plot.binX(\n    {y: \"count\"}, \n    {x: \"body_mass_g\", fill: \"species\", thresholds: 20}\n  ))\n  .plot({\n    facet: {\n      data: filtered,\n      x: \"sex\",\n      y: \"species\",\n      marginRight: 80\n    },\n    marks: [\n      Plot.frame(),\n    ]\n  }\n)\n```\n\n\n## Data\n\n\n```{ojs}\nInputs.table(filtered)\n```\n\n\n:::\n\n\n```{ojs}\ndata = FileAttachment(\"../data/palmer-penguins.csv\").csv({ typed: true })\n```\n\n```{ojs}\nfiltered = data.filter(function(penguin) {\n  return bill_length_min < penguin.bill_length_mm &&\n         islands.includes(penguin.island);\n})\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}